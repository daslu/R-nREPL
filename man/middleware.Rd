% Generated by roxygen2 (4.0.2): do not edit by hand
\name{middleware}
\alias{middleware}
\title{Create middleware functions.}
\usage{
middleware(name, handles = character(), requires = character(),
  expects = character(), fun)
}
\arguments{
\item{name}{String giving the names of the middleware. Commonly, is the name
of the}

\item{handles}{Character verctor of operations that thhis middleware
handles.}

\item{requires}{Character vector of operations that must exist in the final
stack at a higher level than the current middleware's handler.}

\item{expects}{Character vector of operations that must exist in the final
stack at a lower level than the current middleware's handler. This is useful
when the middleware pre-process the message in order to feed it to some
other handler.}

\item{fun}{Actual middleware function that accepts one argument, a handler,
and returns a handler.}
}
\value{
A wrapped middleware function \code{fun} with a \code{descriptor}
attribute for internal use.
}
\description{
Middleware is a higher-order function of one argument that accepts a handler
and returns a new handler in order to compose additional functionality onto
or around the original handler. By convention middleware functions are
prefixed with `mw_`.
}
\details{
Handler is a function that accepts incoming message from the client. Each
handler must accept at least two named arguments \code{op}, naming and
operation and \code{\link{transport}} - a structure that provides the
phisical transportation layer. By inspecting \code{op} argument the handler
must decide whether to handle this message or to pass it through to
downstream handlers. Thus handler's argument list must contain \code{...}
argument. Handler's return values are ignores and each handler must send a
response dictionary to the client with \code{transport$write(response)}
idem, where \code{response} is a named list of response arguments. Each
\code{response} must contain at least two arguments \code{id} of the
incoming message and \code{session}. This is best done with a helper
\code{\link{respfor}} utility function.

For a detailed technical details on the protocol see
\url{https://github.com/clojure/tools.nrepl} and the package code.

In nREPL package, middlewares are stored in \code{middlewares} environment
inside. An addon package can populate that environment with additional
middlewares. Alternatively \code{\link{start_server}} function accepts
\code{additional_middlewares} arguments.
}
\seealso{
\code{\link{start_server}}, \code{\link{transport}},
\code{\link{respfor}}, \code{\link{mw_describe}}, \code{\link{mw_describe}},
\code{\link{mw_eval}}, \code{\link{mw_session}}.
}

